{
	// Place your application workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.

	"Class boilerplate code": {
		"scope": "javascript",
		"prefix": "file:class",
		"body": [
			"import React, { Component } from 'react';",
			"",
			"export default class $TM_FILENAME_BASE extends Component {",
			"\tconstructor(props) {",
			"\t\tsuper(props);",
			"\t\tthis.state={};",
			"\t}",
			"\trender() {",
			"\t\treturn (",
			"\t\t\t<div className='$TM_FILENAME_BASE'>",
			"\t\t\t</div>",
			"\t\t);",
			"\t}",
			"}"
		],
		"description": "Class boilerplate code"
	},
  "Function boilerplate code": {
		"scope": "javascript",
		"prefix": "file:function",
		"body": [
			"import React from 'react';",
			"",
			"export default function $TM_FILENAME_BASE(props) {",
			"\treturn (",
			"\t\t<div className='$TM_FILENAME_BASE'>",
			"\t\t</div>",
			"\t);",
			"}"
		],
		"description": "Function boilerplate code"
	},
	"MongoDB Model boilerplate code": {
		"scope": "javascript",
		"prefix": "file:model",
		"body": [
			"const mongoose = require('mongoose');",
			"const Schema = mongoose.Schema;",
			"",
			"const ${TM_FILENAME_BASE}Schema = new Schema(",
			"\t{",
			"\t\tsample_element: {",
			"\t\t\ttype: String",
			"\t\t},",
			"\t\tsample_element2: {",
			"\t\t\tunique: true,",
			"\t\t\ttype: Array",
			"\t\t},",
			"\t},",
			"\t{ collection: '${TM_FILENAME_BASE}'}",
			");",
			"",
			"module.exports = mongoose.model('${TM_FILENAME_BASE}', ${TM_FILENAME_BASE}Schema);"
		],
		"description": "MongoDB Model boilerplate code"
	},
	"Test":{
		"scope": "javascript",
		"prefix": "tests",
		"body": [
			"${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}"
		],
		"description": "T"
	},
	"Route boilerplate code": {
		"scope": "javascript",
		"prefix": "file:route",
		"body": [
			"const express = require('express');",
			"const router = express.Router();",
			"const ${TM_FILENAME_BASE} = require('../models/${TM_FILENAME_BASE}')",
			"",
			"// GET",
			"router.get('/get${TM_FILENAME_BASE}s', (req, res) => {",
			"\t${TM_FILENAME_BASE}.find({}).then(${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}s => res.json(${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}s));",
			"});",
			"",
			"// ADD",
			"router.post('/add${TM_FILENAME_BASE}', (req, res) => {",
			"\tconst new${TM_FILENAME_BASE} = new ${TM_FILENAME_BASE}({",
			"\t\t//Whatever attributes are in the schema and you want to pass in, example below",
			"\t\t// attr1: req.body.attr1",
			"\t});",
			"",
			"\t${TM_FILENAME_BASE}.create(new${TM_FILENAME_BASE}, (err, ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}) => {",
			"\t\tif(err){",
			"\t\t\treturn res.send(err)",
			"\t\t}",
			"\t\treturn res.json(${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/});",
			"\t});",
			"});",
			"",
			"// EDIT",
			"router.post('/edit${TM_FILENAME_BASE}', (req, res) => {",
			"\t${TM_FILENAME_BASE}.findById({_id: req.body._id})",
			"\t\t.then(${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/} => {",
			"\t\t\t// Whatever attributes you need to pass in, example below",
			"\t\t\t// ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}.attr1 = req.body.attr1 || ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}.attr1,",
			"\t\t\t${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}.save()",
			"\t\t\t\t.then(ret => {",
			"\t\t\t\t\tres.json(ret);",
			"\t\t\t\t})",
			"\t\t\t\t.catch(err => {",
			"\t\t\t\t\tres.send(err);",
			"\t\t\t\t}",
			"\t\t\t);",
			"\t\t})",
			"\t\t.catch(err => {",
			"\t\t\tres.send({err, message: '${TM_FILENAME_BASE} not found'});",
			"\t\t}",
			"\t)",
			"});",
			"",
			"// DELETE",
			"router.post('/delete${TM_FILENAME_BASE}', (req, res) => {",
			"\t${TM_FILENAME_BASE}.deleteOne({ _id: req.body._id}, (err, ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}) => {",
			"\t\tif(err) {",
			"\t\t\treturn res.send(err);",
			"\t\t}",
			"\t\treturn res.json(${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/});",
			"\t})",
			"});",
			"",
			"module.exports = router;",
			""
		],
		"description": "Route boilerplate code"
	},
	"APIFunction boilerplate code": {
		"scope": "javascript",
		"prefix": "file:apifunction",
		"body": [
			"import axios from 'axios'",
			"",
			"// GET",
			"export async function get${TM_FILENAME_BASE}s(){",
			"\tlet data;",
			"\tawait axios",
			"\t\t.get('/api/get${TM_FILENAME_BASE}s')",
			"\t\t.then(res => {",
			"\t\t\t//console.log(res data received: ', res.data",
			"\t\t\tdata = res.data;",
			"\t\t})",
			"\t\t.catch(err => {",
			"\t\t\treturn err;",
			"\t\t}",
			"\t);",
			"\treturn data;",
			"}",
			"",
			"// ADD",
			"export async function add${TM_FILENAME_BASE}(${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}){",
			"\tlet data;",
			"\tconst ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}ToAdd = {",
			"\t\t// Whatever attributes you need to pass in, example below",
			"\t\t// attr1: ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}.attr1",
			"\t};",
			"\tawait axios",
			"\t\t.post('/api/add${TM_FILENAME_BASE}', ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}ToAdd)",
			"\t\t.then(res => {",
			"\t\t\t//console.log(res data received: ', res.data",
			"\t\t\tdata = res.data;",
			"\t\t})",
			"\t\t.catch(err => {",
			"\t\t\treturn err;",
			"\t\t}",
			"\t);",
			"\treturn data;",
			"}",
			"",
			"// EDIT",
			"export async function edit${TM_FILENAME_BASE}(${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}){",
			"\tlet data;",
			"\tconst ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}ToEdit = {",
			"\t\t// Whatever attributes you need to pass in, example below",
			"\t\t// attr1: ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}.attr1",
			"\t\t// Will need at least the _id to find and edit the blogPost",
			"\t\t_id: ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}._id,",
			"\t};",
			"\tawait axios",
			"\t\t.post('/api/edit${TM_FILENAME_BASE}', ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}ToEdit)",
			"\t\t.then(res => {",
			"\t\t\t//console.log(res data received: ', res.data",
			"\t\t\tdata = res.data;",
			"\t\t})",
			"\t\t.catch(err => {",
			"\t\t\treturn err;",
			"\t\t}",
			"\t);",
			"\treturn data;",
			"}",
			"",
			"// DELETE",
			"export async function delete${TM_FILENAME_BASE}(${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}){",
			"\tlet data;",
			"\tconst ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}ToDelete = {",
			"\t\t// Whatever attributes you need to pass in",
			"\t\t// Only need the _id to find and delete the blogPost",
			"\t\t_id: ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}._id",
			"\t};",
			"\tawait axios",
			"\t\t.post('/api/delete${TM_FILENAME_BASE}', ${TM_FILENAME_BASE/^(.)(.*)$/${1:/downcase}${2}/}ToDelete)",
			"\t\t.then(res => {",
			"\t\t\t//console.log(res data received: ', res.data",
			"\t\t\tdata = res.data;",
			"\t\t})",
			"\t\t.catch(err => {",
			"\t\t\treturn err;",
			"\t\t}",
			"\t);",
			"\treturn data;",
			"}",
			"",
		],
		"description": "APIFunction boilerplate code"
	},
}
